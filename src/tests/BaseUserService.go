// Code generated by mockery v2.40.3. DO NOT EDIT.

package tests

import (
	api "stealthy-backend/api"

	mock "github.com/stretchr/testify/mock"
)

// BaseUserService is an autogenerated mock type for the BaseUserService type
type BaseUserService struct {
	mock.Mock
}

// AddUser provides a mock function with given fields: request
func (_m *BaseUserService) AddUser(request *api.SignUpRequest) (*api.UserResponse, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for AddUser")
	}

	var r0 *api.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*api.SignUpRequest) (*api.UserResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*api.SignUpRequest) *api.UserResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*api.SignUpRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckUserExists provides a mock function with given fields: request
func (_m *BaseUserService) CheckUserExists(request *api.SignUpRequest) (bool, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for CheckUserExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*api.SignUpRequest) (bool, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*api.SignUpRequest) bool); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*api.SignUpRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByCredentials provides a mock function with given fields: request
func (_m *BaseUserService) GetUserByCredentials(request *api.SignInRequest) (*api.User, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByCredentials")
	}

	var r0 *api.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*api.SignInRequest) (*api.User, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*api.SignInRequest) *api.User); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*api.SignInRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUsername provides a mock function with given fields: username
func (_m *BaseUserService) GetUserByUsername(username string) (*api.User, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 *api.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*api.User, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *api.User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserPublicData provides a mock function with given fields: username
func (_m *BaseUserService) GetUserPublicData(username string) (*api.UserResponse, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserPublicData")
	}

	var r0 *api.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*api.UserResponse, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *api.UserResponse); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBaseUserService creates a new instance of BaseUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBaseUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *BaseUserService {
	mock := &BaseUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
