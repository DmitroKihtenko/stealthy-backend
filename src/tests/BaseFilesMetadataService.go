// Code generated by mockery v2.40.3. DO NOT EDIT.

package tests

import (
	api "stealthy-backend/api"

	mock "github.com/stretchr/testify/mock"
)

// BaseFilesMetadataService is an autogenerated mock type for the BaseFilesMetadataService type
type BaseFilesMetadataService struct {
	mock.Mock
}

// AddFileMetadata provides a mock function with given fields: request
func (_m *BaseFilesMetadataService) AddFileMetadata(request *api.FileMetadata) (*api.AddFileResponse, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for AddFileMetadata")
	}

	var r0 *api.AddFileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*api.FileMetadata) (*api.AddFileResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*api.FileMetadata) *api.AddFileResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.AddFileResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*api.FileMetadata) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckFileMetadataExists provides a mock function with given fields: fileId
func (_m *BaseFilesMetadataService) CheckFileMetadataExists(fileId string) (bool, error) {
	ret := _m.Called(fileId)

	if len(ret) == 0 {
		panic("no return value specified for CheckFileMetadataExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(fileId)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(fileId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fileId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFileMetadata provides a mock function with given fields: fileId
func (_m *BaseFilesMetadataService) GetFileMetadata(fileId string) (*api.FileMetadata, error) {
	ret := _m.Called(fileId)

	if len(ret) == 0 {
		panic("no return value specified for GetFileMetadata")
	}

	var r0 *api.FileMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*api.FileMetadata, error)); ok {
		return rf(fileId)
	}
	if rf, ok := ret.Get(0).(func(string) *api.FileMetadata); ok {
		r0 = rf(fileId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.FileMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fileId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFileMetadataList provides a mock function with given fields: queryParams, username
func (_m *BaseFilesMetadataService) GetFileMetadataList(queryParams *api.PaginationQueryParameters, username string) (*api.FileMetadataListResponse, error) {
	ret := _m.Called(queryParams, username)

	if len(ret) == 0 {
		panic("no return value specified for GetFileMetadataList")
	}

	var r0 *api.FileMetadataListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*api.PaginationQueryParameters, string) (*api.FileMetadataListResponse, error)); ok {
		return rf(queryParams, username)
	}
	if rf, ok := ret.Get(0).(func(*api.PaginationQueryParameters, string) *api.FileMetadataListResponse); ok {
		r0 = rf(queryParams, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.FileMetadataListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*api.PaginationQueryParameters, string) error); ok {
		r1 = rf(queryParams, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBaseFilesMetadataService creates a new instance of BaseFilesMetadataService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBaseFilesMetadataService(t interface {
	mock.TestingT
	Cleanup(func())
}) *BaseFilesMetadataService {
	mock := &BaseFilesMetadataService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
