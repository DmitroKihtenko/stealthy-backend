// Code generated by mockery v2.40.3. DO NOT EDIT.

package tests

import (
	api "stealthy-backend/api"

	mock "github.com/stretchr/testify/mock"
)

// BaseAuthorizationService is an autogenerated mock type for the BaseAuthorizationService type
type BaseAuthorizationService struct {
	mock.Mock
}

// GenerateToken provides a mock function with given fields: user
func (_m *BaseAuthorizationService) GenerateToken(user *api.User) (string, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*api.User) (string, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*api.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*api.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseToken provides a mock function with given fields: tokenString
func (_m *BaseAuthorizationService) ParseToken(tokenString string) (*api.User, error) {
	ret := _m.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for ParseToken")
	}

	var r0 *api.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*api.User, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) *api.User); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBaseAuthorizationService creates a new instance of BaseAuthorizationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBaseAuthorizationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *BaseAuthorizationService {
	mock := &BaseAuthorizationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
