// Code generated by mockery v2.40.3. DO NOT EDIT.

package tests

import (
	api "stealthy-backend/api"

	mock "github.com/stretchr/testify/mock"
)

// BaseFilesService is an autogenerated mock type for the BaseFilesService type
type BaseFilesService struct {
	mock.Mock
}

// AddFile provides a mock function with given fields: request
func (_m *BaseFilesService) AddFile(request *api.FileData) (*api.AddFileResponse, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for AddFile")
	}

	var r0 *api.AddFileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*api.FileData) (*api.AddFileResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*api.FileData) *api.AddFileResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.AddFileResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*api.FileData) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckFileDataExists provides a mock function with given fields: fileId
func (_m *BaseFilesService) CheckFileDataExists(fileId string) (bool, error) {
	ret := _m.Called(fileId)

	if len(ret) == 0 {
		panic("no return value specified for CheckFileDataExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(fileId)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(fileId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fileId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFile provides a mock function with given fields: fileId
func (_m *BaseFilesService) GetFile(fileId string) (*api.FileData, error) {
	ret := _m.Called(fileId)

	if len(ret) == 0 {
		panic("no return value specified for GetFile")
	}

	var r0 *api.FileData
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*api.FileData, error)); ok {
		return rf(fileId)
	}
	if rf, ok := ret.Get(0).(func(string) *api.FileData); ok {
		r0 = rf(fileId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.FileData)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fileId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBaseFilesService creates a new instance of BaseFilesService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBaseFilesService(t interface {
	mock.TestingT
	Cleanup(func())
}) *BaseFilesService {
	mock := &BaseFilesService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
